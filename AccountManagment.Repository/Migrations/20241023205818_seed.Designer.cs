// <auto-generated />
using System;
using AccountManagment.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccountManagment.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241023205818_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountManagment.Core.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 1000m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3051),
                            Iban = "TR123456789012345678901",
                            IsActive = true,
                            IsDeleted = false,
                            Number = "TR123456789012345678901",
                            Type = "Vadesiz",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 1500m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3055),
                            Iban = "TR234567890123456789012",
                            IsActive = true,
                            IsDeleted = false,
                            Number = "TR234567890123456789012",
                            Type = "Vadesiz",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Balance = 2000m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3057),
                            Iban = "TR345678901234567890123",
                            IsActive = false,
                            IsDeleted = false,
                            Number = "TR345678901234567890123",
                            Type = "Vadeli",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Balance = 2500m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3057),
                            Iban = "TR456789012345678901234",
                            IsActive = true,
                            IsDeleted = false,
                            Number = "TR456789012345678901234",
                            Type = "Vadesiz",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Balance = 500m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3058),
                            Iban = "TR567890123456789012345",
                            IsActive = true,
                            IsDeleted = false,
                            Number = "TR567890123456789012345",
                            Type = "Vadesiz",
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            Balance = 7500m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3059),
                            Iban = "TR678901234567890123456",
                            IsActive = true,
                            IsDeleted = false,
                            Number = "TR678901234567890123456",
                            Type = "Vadeli",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("AccountManagment.Core.Models.AccountTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Direction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("TransferId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransferId");

                    b.ToTable("AccountTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            Amount = 500m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3072),
                            Description = "Para Yatırma",
                            Direction = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 1,
                            Amount = 200m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3074),
                            Description = "Para Çekme",
                            Direction = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 2,
                            Amount = 1000m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3075),
                            Description = "Fatura Ödeme",
                            Direction = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 3,
                            Amount = 2500m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3076),
                            Description = "Havale",
                            Direction = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 4,
                            Amount = 1500m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3077),
                            Description = "Transfer",
                            Direction = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 5,
                            Amount = 3000m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3077),
                            Description = "Para Yatırma",
                            Direction = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            AccountId = 6,
                            Amount = 500m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3078),
                            Description = "Para Çekme",
                            Direction = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("AccountManagment.Core.Models.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SourceAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetAccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SourceAccountId");

                    b.HasIndex("TargetAccountId");

                    b.ToTable("Transfers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1000m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3095),
                            Description = "Kredi Kartı Transferi",
                            IsDeleted = false,
                            SourceAccountId = 1,
                            TargetAccountId = 2
                        },
                        new
                        {
                            Id = 2,
                            Amount = 2000m,
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(3096),
                            Description = "Havale",
                            IsDeleted = false,
                            SourceAccountId = 3,
                            TargetAccountId = 4
                        });
                });

            modelBuilder.Entity("AccountManagment.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "İstanbul Cad. No:1",
                            City = "İstanbul",
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(2915),
                            Email = "rahmetdonmez@gmail.com",
                            IsAdmin = false,
                            IsDeleted = false,
                            Name = "Rahmet",
                            Password = "Password1",
                            Phone = "05001234567",
                            State = "İstanbul",
                            Surname = "Dönmez",
                            TcNo = "12345678901"
                        },
                        new
                        {
                            Id = 2,
                            Adress = "Ankara Cad. No:2",
                            City = "Ankara",
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(2937),
                            Email = "ayse.kara@example.com",
                            IsAdmin = true,
                            IsDeleted = false,
                            Name = "Ayşe",
                            Password = "Password2",
                            Phone = "05007654321",
                            State = "Ankara",
                            Surname = "Kara",
                            TcNo = "10987654321"
                        },
                        new
                        {
                            Id = 3,
                            Adress = "İzmir Cad. No:3",
                            City = "İzmir",
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(2938),
                            Email = "mehmet.demir@example.com",
                            IsAdmin = false,
                            IsDeleted = false,
                            Name = "Mehmet",
                            Password = "Password3",
                            Phone = "05009876543",
                            State = "İzmir",
                            Surname = "Demir",
                            TcNo = "12345678902"
                        },
                        new
                        {
                            Id = 4,
                            Adress = "Bursa Cad. No:4",
                            City = "Bursa",
                            CreatedDate = new DateTime(2024, 10, 23, 23, 58, 18, 686, DateTimeKind.Local).AddTicks(2940),
                            Email = "fatma.celik@example.com",
                            IsAdmin = false,
                            IsDeleted = false,
                            Name = "Fatma",
                            Password = "Password4",
                            Phone = "05001234568",
                            State = "Bursa",
                            Surname = "Çelik",
                            TcNo = "12345678903"
                        });
                });

            modelBuilder.Entity("AccountManagment.Core.Models.Account", b =>
                {
                    b.HasOne("AccountManagment.Core.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountManagment.Core.Models.AccountTransaction", b =>
                {
                    b.HasOne("AccountManagment.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountManagment.Core.Models.Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferId");

                    b.Navigation("Account");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("AccountManagment.Core.Models.Transfer", b =>
                {
                    b.HasOne("AccountManagment.Core.Models.Account", "SourceAccount")
                        .WithMany()
                        .HasForeignKey("SourceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountManagment.Core.Models.Account", "TargetAccount")
                        .WithMany()
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceAccount");

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("AccountManagment.Core.Models.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
